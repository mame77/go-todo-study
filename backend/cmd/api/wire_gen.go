// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/labstack/echo/v4"
	"github.com/mame77/go-todo-study/internal/datasource"
	"github.com/mame77/go-todo-study/internal/handler"
	"github.com/mame77/go-todo-study/internal/repository/api"
	"github.com/mame77/go-todo-study/internal/repository/mysql"
	"github.com/mame77/go-todo-study/internal/repository/redis"
	"github.com/mame77/go-todo-study/internal/service"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	db := datasource.GetMySQLConnection()
	userRepository := mysql.NewMySqlUserRepository(db)
	userCommandService := service.NewUserCommandService(userRepository)
	client := datasource.NewRedisClient()
	tokenRepository := redis.NewRedisTokenRepository(client)
	authCommandService := service.NewAuthCommandService(userRepository, tokenRepository)
	googleApiClient := datasource.NewGoogleApiClient()
	googleRepository := api.NewApiGoogleRepository(googleApiClient)
	googleCommandService := service.NewGoogleCommandService(userCommandService, authCommandService, userRepository, googleRepository)
	googleHandler := handler.NewGoogleHandler(googleCommandService)
	app := NewApp(googleHandler)
	return app, nil
}

// wire.go:

type App struct {
	Echo          *echo.Echo
	GoogleHandler *handler.GoogleHandler
}

func NewApp(googleHandler *handler.GoogleHandler) *App {
	e := echo.New()
	return &App{
		Echo:          e,
		GoogleHandler: googleHandler,
	}
}
